<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>キャンセル</value>
  </data>
  <data name="btnBrowse.Text" xml:space="preserve">
    <value>ファイルを参照...</value>
  </data>
  <data name="btnProcess.Text" xml:space="preserve">
    <value>プロセスを選択...</value>
  </data>
  <data name="btnChooseService.Text" xml:space="preserve">
    <value>サービスを選択...</value>
  </data>
  <data name="ofd.Title" xml:space="preserve">
    <value>プログラムを選択</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="label6.Size" type="System.Drawing.Size, System.Drawing">
    <value>79, 13</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>恒久的に除外:</value>
  </data>
  <data name="transparentLabel1.Text" xml:space="preserve">
    <value>認識されたプレースフォルダ</value>
  </data>
  <data name="chkRestrictToLocalNetwork.Size" type="System.Drawing.Size, System.Drawing">
    <value>149, 17</value>
  </data>
  <data name="chkRestrictToLocalNetwork.Text" xml:space="preserve">
    <value>ローカルネットワークに制限</value>
  </data>
  <data name="radBlock.Size" type="System.Drawing.Size, System.Drawing">
    <value>167, 17</value>
  </data>
  <data name="radBlock.Text" xml:space="preserve">
    <value>すべてのトラフィックを常時遮断</value>
  </data>
  <data name="radTcpUdpOut.Size" type="System.Drawing.Size, System.Drawing">
    <value>199, 17</value>
  </data>
  <data name="radTcpUdpOut.Text" xml:space="preserve">
    <value>UDP と TCP トラフィックの送信を許可</value>
  </data>
  <data name="radTcpUdpUnrestricted.Size" type="System.Drawing.Size, System.Drawing">
    <value>185, 17</value>
  </data>
  <data name="radTcpUdpUnrestricted.Text" xml:space="preserve">
    <value>UDP と TCP トラフィックの制限なし</value>
  </data>
  <data name="radUnrestricted.Size" type="System.Drawing.Size, System.Drawing">
    <value>61, 17</value>
  </data>
  <data name="radUnrestricted.Text" xml:space="preserve">
    <value>無制限</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>上記の制限に加えて以下のポートを開く (カンマ区切り)</value>
  </data>
  <data name="txtListenPortUDP.AccessibleName" xml:space="preserve">
    <value>受信する UDP</value>
  </data>
  <data name="txtListenPortTCP.AccessibleName" xml:space="preserve">
    <value>受信する TCP</value>
  </data>
  <data name="label3.Size" type="System.Drawing.Size, System.Drawing">
    <value>58, 13</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>TCP 受信:</value>
  </data>
  <data name="label4.Size" type="System.Drawing.Size, System.Drawing">
    <value>60, 13</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>UDP 受信:</value>
  </data>
  <data name="txtOutboundPortUDP.AccessibleName" xml:space="preserve">
    <value>送信する UDP</value>
  </data>
  <data name="txtOutboundPortTCP.AccessibleName" xml:space="preserve">
    <value>送信する TCP</value>
  </data>
  <data name="label7.Size" type="System.Drawing.Size, System.Drawing">
    <value>58, 13</value>
  </data>
  <data name="label7.Text" xml:space="preserve">
    <value>TCP 送信:</value>
  </data>
  <data name="label8.Size" type="System.Drawing.Size, System.Drawing">
    <value>60, 13</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>UDP 送信:</value>
  </data>
  <data name="radOnlySpecifiedPorts.Size" type="System.Drawing.Size, System.Drawing">
    <value>150, 17</value>
  </data>
  <data name="radOnlySpecifiedPorts.Text" xml:space="preserve">
    <value>指定されたポートのみ許可</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>除外項目の追加/変更 - TinyWall</value>
  </data>
  <data name="lblApplicationType.Text" xml:space="preserve">
    <value>種類:</value>
  </data>
  <data name="btnSelectUwpApp.Text" xml:space="preserve">
    <value>UWP アプリを選択...</value>
  </data>
  <data name="lblApplication.Text" xml:space="preserve">
    <value>アプリケーション:</value>
  </data>
  <data name="chkInheritToChildren.Text" xml:space="preserve">
    <value>子プロセスに同じ規則を適用</value>
  </data>
  <data name="btnRemoveSoftware.Text" xml:space="preserve">
    <value>ソフトウェアを削除する</value>
  </data>
</root>