name: Build and Release .NET Installer

on:
  # Run on pushes to your main development branch (e.g., master, main, devel)
  push:
    branches: [ master ]
  # Run on pull requests targeting your main development branch
  pull_request:
    branches: [ master ]
  # Run when a release is created in the GitHub UI
  release:
    types: [created]

jobs:
  build:
    name: Build MSI Installer
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      # --- WORKAROUND: Manual WiX Installation ---
      # This replaces the 'uses: wixtoolset/wix3-action@v1' step
      - name: Setup WiX Toolset Manually
        shell: pwsh
        run: |
          # 1. Download WiX Toolset 3.14
          Write-Host "Downloading WiX Toolset..."
          $wixUrl = "https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314.exe"
          $wixInstaller = "$env:TEMP\wix314.exe"
          Invoke-WebRequest -Uri $wixUrl -OutFile $wixInstaller

          # 2. Install WiX Toolset quietly
          Write-Host "Installing WiX Toolset..."
          Start-Process -FilePath $wixInstaller -ArgumentList "/install", "/quiet", "/norestart" -Wait

          # 3. Add WiX tools directory to the GITHUB_PATH for subsequent steps
          Write-Host "Adding WiX to PATH..."
          $wixPath = "${env:ProgramFiles(x86)}\WiX Toolset v3.14\bin"
          if (Test-Path $wixPath) {
            Add-Content -Path $env:GITHUB_PATH -Value $wixPath
            Write-Host "✓ WiX Toolset added to PATH: $wixPath"
          } else {
            Write-Error "ERROR: WiX installation directory not found at $wixPath"
            exit 1
          }

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore NuGet packages
        run: nuget restore TinyWall.sln

      - name: Build TinyWall Application
        run: msbuild TinyWall.sln /p:Configuration=Release /p:Platform="Any CPU"

      - name: Prepare files for installer
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $appExe = "TinyWall\bin\Release\TinyWall.exe"
          if (-Not (Test-Path $appExe)) { Write-Error "ERROR: $appExe not found after build."; exit 1 }
          Write-Host "✓ Application executable found."
          $targetDir = "MsiSetup\Sources\ProgramFiles\TinyWall"
          New-Item -ItemType Directory -Force -Path $targetDir
          $sourceDir = "TinyWall\bin\Release"
          Copy-Item -Path "$sourceDir\*" -Destination $targetDir -Recurse -Force
          Write-Host "✓ Copied application files to $targetDir"
          $dbSourceDir = "TinyWall\Database"; $dbTargetDir = "MsiSetup\Sources\CommonAppData\TinyWall"
          if (Test-Path $dbSourceDir) {
            if (-Not (Test-Path $dbTargetDir)) { New-Item -ItemType Directory -Path $dbTargetDir -Force }
            Copy-Item -Path "$dbSourceDir\*" -Destination $dbTargetDir -Recurse -Force
            Write-Host "✓ Copied database files to $dbTargetDir"
          }

      - name: Build MSI Installer
        run: msbuild MsiSetup\MsiSetup.wixproj /p:Configuration=Release /p:Platform=x86

      - name: Verify MSI output
        shell: pwsh
        run: |
          $msiFile = "MsiSetup\bin\Release\TinyWallInstaller.msi"
          if (-Not (Test-Path $msiFile)) { Write-Error "ERROR: Installer file not found."; exit 1 }
          $msiInfo = Get-Item $msiFile
          Write-Host "✓ MSI installer created successfully: $($msiInfo.Name) ($([math]::Round($msiInfo.Length / 1MB, 2)) MB)"

      - name: Upload MSI as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: TinyWall-Installer
          path: MsiSetup/bin/Release/TinyWallInstaller.msi

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - name: Download MSI from build job
        uses: actions/download-artifact@v4
        with:
          name: TinyWall-Installer
          
      - name: Create Release and Upload MSI
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          name: Release ${{ github.event.release.name }}
          body: ${{ github.event.release.body }}
          prerelease: ${{ github.event.release.prerelease }}
          files: TinyWallInstaller.msi
